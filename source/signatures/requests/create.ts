/*!
 * Copyright (C) 2019 Silas B. Domingos
 * This source code is licensed under the MIT License as described in the file LICENSE.
 */
import * as Class from '@singleware/class';
import * as RestDB from '@singleware/restdb';

import * as Integrations from '../../integrations';

import * as Types from '../types';
import * as Internals from './internals';

/**
 * Create signature, entity class.
 */
@RestDB.Schema.Entity('signrequests')
@Class.Describe()
export class Create extends Class.Null {
  /**
   * Email of user sending the SignRequest (must be a validated email)
   * Max 255 characters.
   */
  @RestDB.Schema.Alias('from_email')
  @RestDB.Schema.String(0, 255)
  @RestDB.Schema.Null()
  @Class.Public()
  public fromEmail?: string | null;

  /**
   * Name to be used in the From email header, e.g. {from_email_name} <no-reply@signrequest.com>
   * Max 255 characters.
   */
  @RestDB.Schema.Alias('from_email_name')
  @RestDB.Schema.String(0, 255)
  @RestDB.Schema.Null()
  @Class.Public()
  public fromEmailName?: string | null;

  /**
   * Have the sender of a SignRequest prepare the document before sending the request out.
   * @see https://signrequest.com/api/v1/docs/#section/Preparing-a-document/Prepare-using-the-web-interface
   */
  @RestDB.Schema.Alias('is_being_prepared')
  @RestDB.Schema.Boolean()
  @RestDB.Schema.Null()
  @Class.Public()
  public isBeingPrepared?: boolean | null;

  /**
   * URL at which SignRequest will redirect to when a document is signed.
   * Max 2100 characters.
   */
  @RestDB.Schema.Alias('redirect_url')
  @RestDB.Schema.String(0, 2100)
  @RestDB.Schema.Null()
  @Class.Public()
  public redirectUrl?: string | null;

  /**
   * URL at which SignRequest will redirect to when a document is declined.
   * Max 2100 characters.
   */
  @RestDB.Schema.Alias('redirect_url')
  @RestDB.Schema.String(0, 2100)
  @RestDB.Schema.Null()
  @Class.Public()
  public redirectUrlDeclined?: string | null;

  /**
   * Attachments that signers are required to upload.
   */
  @RestDB.Schema.Alias('required_attachments')
  @RestDB.Schema.Array(Internals.Requirement)
  @Class.Public()
  public requiredAttachments?: Internals.Requirement[];

  /**
   * Disable uploading/adding of attachments.
   */
  @RestDB.Schema.Alias('disable_attachments')
  @RestDB.Schema.Boolean()
  @Class.Public()
  public disableAttachments?: boolean;

  /**
   * Disable usage of signatures generated by typing (text).
   */
  @RestDB.Schema.Alias('disable_text_signatures')
  @RestDB.Schema.Boolean()
  @Class.Public()
  public disableTextSignatures?: boolean;

  /**
   * Disable adding of text.
   */
  @RestDB.Schema.Alias('disable_text')
  @RestDB.Schema.Boolean()
  @Class.Public()
  public disableText?: boolean;

  /**
   * Disable adding of dates.
   */
  @RestDB.Schema.Alias('disable_date')
  @RestDB.Schema.Boolean()
  @Class.Public()
  public disableDate?: boolean;

  /**
   * Disable all SignRequest status emails as well as the email that contains the signed documents.
   */
  @RestDB.Schema.Alias('disable_emails')
  @RestDB.Schema.Boolean()
  @Class.Public()
  public disableEmails?: boolean;

  /**
   * Disable usage of uploaded signatures (images).
   */
  @RestDB.Schema.Alias('disable_upload_signatures')
  @RestDB.Schema.Boolean()
  @Class.Public()
  public disableUploadSignatures?: boolean;

  /**
   * Disables storing timestamp proof hashes in blockchain integrations.
   */
  @RestDB.Schema.Alias('disable_blockchain_proof')
  @RestDB.Schema.Boolean()
  @RestDB.Schema.Null()
  @Class.Public()
  public disableBlockchainProof?: boolean | null;

  /**
   * When true a text message verification is needed before the signer can see the document.
   */
  @RestDB.Schema.Alias('text_message_verification_locked')
  @RestDB.Schema.Boolean()
  @RestDB.Schema.Null()
  @Class.Public()
  public textMessageVerificationLocked?: boolean | null;

  /**
   * Subject of SignRequest email.
   * Max 512 characters.
   */
  @RestDB.Schema.String(0, 512)
  @RestDB.Schema.Null()
  @Class.Public()
  public subject?: string | null;

  /**
   * Message to include in SignRequest email, may contain the following html tags:
   * a, abbr, acronym, b, blockquote, code, em, i, ul, li, ol, and strong
   */
  @RestDB.Schema.String()
  @RestDB.Schema.Null()
  @Class.Public()
  public message?: string | null;

  /**
   * Who is signing.
   */
  @RestDB.Schema.Enumeration(Object.values(Types.Who))
  @RestDB.Schema.Null()
  @Class.Public()
  public who?: Types.Who | null;

  /**
   * Automatically remind signers to sign a document.
   */
  @RestDB.Schema.Alias('send_reminders')
  @RestDB.Schema.Boolean()
  @Class.Public()
  public sendReminders?: boolean;

  /**
   * Document signers.
   */
  @RestDB.Schema.Required()
  @RestDB.Schema.Array(Internals.Signer)
  @Class.Public()
  public signers!: Internals.Signer[];

  /**
   * Document URL.
   */
  @RestDB.Schema.Required()
  @RestDB.Schema.String()
  @Class.Public()
  public document!: string;

  /**
   * Integration type.
   */
  @RestDB.Schema.Enumeration(Object.values(Integrations.Types))
  @RestDB.Schema.Null()
  @Class.Public()
  public integration?: Integrations.Types | null;

  /**
   * Integration data.
   */
  @RestDB.Schema.Alias('integration_data')
  @RestDB.Schema.String()
  @RestDB.Schema.Null()
  @Class.Public()
  public integrationData?: string | null;
}
